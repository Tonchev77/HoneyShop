// <auto-generated />
using System;
using HoneyShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HoneyShop.Data.Migrations
{
    [DbContext(typeof(HoneyShopDbContext))]
    [Migration("20250721221655_AddingManagerTable")]
    partial class AddingManagerTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HoneyShop.Data.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Cart identifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the cart");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the cart has been deleted");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", t =>
                        {
                            t.HasComment("Cart with user orders in the system");
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.CartItem", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the product");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the cart");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the product of cart");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the product in cart has been deleted");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Number of product units added to the cart");

                    b.HasKey("ProductId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CartsItems", t =>
                        {
                            t.HasComment("Product entry in a user's cart");
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category identifier");

                    b.Property<DateTime?>("DateleteAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the category");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Optional description of the category");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the category has been deleted");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the category");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("Represents a category to which products can belong");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b74e49c-8bfb-4c3d-b91e-3d5b441e9d13"),
                            Description = "Different types of raw and processed honey.",
                            IsDeleted = false,
                            Name = "Honey"
                        },
                        new
                        {
                            Id = new Guid("1fbc3a2e-234a-4f9c-a6d8-f55a388ba5a7"),
                            Description = "Propolis in various forms – tinctures, sprays, and raw.",
                            IsDeleted = false,
                            Name = "Propolis"
                        },
                        new
                        {
                            Id = new Guid("9a3ef5c7-7db9-4f4c-98c2-88c772cf8e91"),
                            Description = "Natural beeswax blocks and pellets for crafting or cosmetics.",
                            IsDeleted = false,
                            Name = "Beeswax"
                        },
                        new
                        {
                            Id = new Guid("a4f0a2bc-b3de-45ac-a62b-5d0100329a6c"),
                            Description = "Granules and capsules made from bee pollen.",
                            IsDeleted = false,
                            Name = "Bee Pollen"
                        },
                        new
                        {
                            Id = new Guid("c70e8376-0ed9-4265-94e3-b9e80b7cf42e"),
                            Description = "Royal jelly in capsules, fresh, or freeze-dried form.",
                            IsDeleted = false,
                            Name = "Royal Jelly"
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Manager's user entity");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Manager in the system");
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order identifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the order");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the order has been deleted");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of ordering the product");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Shows the status of order");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Street address for shipping the order");

                    b.Property<string>("ShippingCity")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Destination city for shipping the order");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Shows the total amount of order");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identifier of the user who placed the order");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Orders in the system");
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order identifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product identifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the item");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the item has been deleted");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product ordered");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Unit price of the product at the time of order");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersItems", t =>
                        {
                            t.HasComment("A line item within an order");
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Status identifier");

                    b.Property<DateTime?>("DateleteAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the status");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Optional description of the status");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the status has been deleted");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the order status");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("OrderStatuses", t =>
                        {
                            t.HasComment("Defines statuses for an order");
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product identifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Category of the product");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of creating the product");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identifier of the user who created the product");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the product");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)")
                        .HasComment("Detailed description of the product");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("URL of the product image");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Indicates whether the product is currently active and visible");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the product has been deleted");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Name of the product");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Current selling price of the product");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Products available in the catalog");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8a7f282-84b9-41d1-b99a-8e4ea6714e4e"),
                            CategoryId = new Guid("6b74e49c-8bfb-4c3d-b91e-3d5b441e9d13"),
                            CreatedAt = new DateTime(2025, 7, 21, 22, 16, 54, 523, DateTimeKind.Utc).AddTicks(9463),
                            CreatorId = "15167365-502c-42be-9f14-3e623c2e465e",
                            Description = "Pure, unprocessed honey from forest hives. Rich in antioxidants and flavor.",
                            ImageUrl = "https://www.queenandhoney.com.au/wp-content/uploads/2020/08/HONEY_03.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Raw Forest Honey",
                            Price = 14.99m
                        },
                        new
                        {
                            Id = new Guid("65dcd066-b208-472e-b52c-6a86fbb3545e"),
                            CategoryId = new Guid("1fbc3a2e-234a-4f9c-a6d8-f55a388ba5a7"),
                            CreatedAt = new DateTime(2025, 7, 21, 22, 16, 54, 523, DateTimeKind.Utc).AddTicks(9470),
                            CreatorId = "15167365-502c-42be-9f14-3e623c2e465e",
                            Description = "Alcohol-based extract of propolis. Supports immune system health.",
                            ImageUrl = "https://m.media-amazon.com/images/I/61VdnnN0eOL._UF1000,1000_QL80_.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Propolis Tincture",
                            Price = 9.50m
                        },
                        new
                        {
                            Id = new Guid("db52dc2f-50b7-4fc0-b27f-cb98e88ccff1"),
                            CategoryId = new Guid("9a3ef5c7-7db9-4f4c-98c2-88c772cf8e91"),
                            CreatedAt = new DateTime(2025, 7, 21, 22, 16, 54, 523, DateTimeKind.Utc).AddTicks(9474),
                            CreatorId = "15167365-502c-42be-9f14-3e623c2e465e",
                            Description = "100% natural beeswax, perfect for DIY cosmetics, candles, and wood polish.",
                            ImageUrl = "https://images.squarespace-cdn.com/content/v1/58a39f8cff7c503db48b3c43/1643666787081-F6AHQE44NO8QHAKIFYY1/Untitled+design+%282%29.png?format=1000w",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Beeswax Block",
                            Price = 5.75m
                        },
                        new
                        {
                            Id = new Guid("49b5d0ce-37d6-4563-8492-3cf358c1ffb1"),
                            CategoryId = new Guid("a4f0a2bc-b3de-45ac-a62b-5d0100329a6c"),
                            CreatedAt = new DateTime(2025, 7, 21, 22, 16, 54, 523, DateTimeKind.Utc).AddTicks(9477),
                            CreatorId = "15167365-502c-42be-9f14-3e623c2e465e",
                            Description = "Dried bee pollen granules. High in vitamins and minerals, ideal as a food supplement.",
                            ImageUrl = "https://www.aratakihoney.co.nz/cdn/shop/files/BeePollenGranulesFront_3069x.png?v=1707957229",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bee Pollen Granules",
                            Price = 12.00m
                        },
                        new
                        {
                            Id = new Guid("8c4d30cc-faa0-4d60-8c41-f055a6df1d91"),
                            CategoryId = new Guid("c70e8376-0ed9-4265-94e3-b9e80b7cf42e"),
                            CreatedAt = new DateTime(2025, 7, 21, 22, 16, 54, 523, DateTimeKind.Utc).AddTicks(9483),
                            CreatorId = "15167365-502c-42be-9f14-3e623c2e465e",
                            Description = "Capsules filled with freeze-dried royal jelly. Known for vitality and skin health benefits.",
                            ImageUrl = "https://m.media-amazon.com/images/I/71KUhcxVe6L.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Royal Jelly Capsules",
                            Price = 19.99m
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.ProductPromotion", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product identifier");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Promotion identifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the promotion");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the promotion has been deleted");

                    b.HasKey("ProductId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductsPromotions", t =>
                        {
                            t.HasComment("Association between a product and a promotion");
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.ProductStock", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product identifier");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Warehouse identifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the item");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the item has been deleted");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Current quantity of the product in stock at the warehouse");

                    b.HasKey("ProductId", "WarehouseId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ProductsStocks", t =>
                        {
                            t.HasComment("Inventory of a product stored in a specific warehouse");
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Promotion identifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the promotion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)")
                        .HasComment("Detailed description of the promotion");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Discount percentage applied by the promotion");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the promotion expires");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows the date of deleting the promotion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Name of the promotion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the promotion becomes active");

                    b.HasKey("Id");

                    b.ToTable("Promotions", t =>
                        {
                            t.HasComment("Promotional offer applicable to one or more products");
                        });
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Warehouse identifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Shows the date of deleting the warehouse");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if the warehouse has been deleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Physical address or location of the warehouse");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Name of the warehouse");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Warehouses", t =>
                        {
                            t.HasComment("Physical storage location for product inventory");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "15167365-502c-42be-9f14-3e623c2e465e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2247c65e-6782-44e2-93ee-0d8d6caf771e",
                            Email = "admin@honeyshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HONEYSHOP.COM",
                            NormalizedUserName = "ADMIN@HONEYSHOP.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHjWFnP5ny6LB9Hr4cNgsn0D0yyWhwrGS1BrKcQK1Yrzz/FUa/OQ8J+c0xD8lV+FIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd750359-a951-47c5-86ed-3bb674f7be15",
                            TwoFactorEnabled = false,
                            UserName = "admin@honeyshop.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Cart", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.CartItem", b =>
                {
                    b.HasOne("HoneyShop.Data.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HoneyShop.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Category", b =>
                {
                    b.HasOne("HoneyShop.Data.Models.Manager", null)
                        .WithMany("Categories")
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Order", b =>
                {
                    b.HasOne("HoneyShop.Data.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.OrderItem", b =>
                {
                    b.HasOne("HoneyShop.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HoneyShop.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.OrderStatus", b =>
                {
                    b.HasOne("HoneyShop.Data.Models.Manager", null)
                        .WithMany("OrderStatuses")
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Product", b =>
                {
                    b.HasOne("HoneyShop.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HoneyShop.Data.Models.Manager", null)
                        .WithMany("Products")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.ProductPromotion", b =>
                {
                    b.HasOne("HoneyShop.Data.Models.Product", "Product")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HoneyShop.Data.Models.Promotion", "Promotion")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.ProductStock", b =>
                {
                    b.HasOne("HoneyShop.Data.Models.Product", "Product")
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoneyShop.Data.Models.Warehouse", "Warehouse")
                        .WithMany("ProductStocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Warehouse", b =>
                {
                    b.HasOne("HoneyShop.Data.Models.Manager", null)
                        .WithMany("Warehouses")
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Manager", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("OrderStatuses");

                    b.Navigation("Products");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductPromotions");

                    b.Navigation("ProductStocks");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Promotion", b =>
                {
                    b.Navigation("ProductPromotions");
                });

            modelBuilder.Entity("HoneyShop.Data.Models.Warehouse", b =>
                {
                    b.Navigation("ProductStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
